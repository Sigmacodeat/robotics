#!/usr/bin/env node
/* Meldet (und optional entfernt) Keys, die in DE existieren, aber in EN nicht (TS-basierte Locales). */
/* eslint-disable @typescript-eslint/no-require-imports */
const fs = require('fs');
const path = require('path');
const { loadTsModule } = require('./load-ts-module');
const { extractKeys } = require('./i18n-validator');

function get(obj, pathStr) {
  return pathStr.split('.').reduce((o, k) => (o && o[k] !== undefined ? o[k] : undefined), obj);
}

function deletePath(obj, pathStr) {
  const parts = pathStr.split('.');
  const last = parts.pop();
  let cur = obj;
  for (const p of parts) {
    if (!cur || typeof cur !== 'object') return false;
    cur = cur[p];
  }
  if (cur && Object.prototype.hasOwnProperty.call(cur, last)) {
    delete cur[last];
    return true;
  }
  return false;
}

function writeTsModule(filePath, data) {
  const rel = path.relative(process.cwd(), filePath);
  const content = `// Auto-generated by prune-unused-i18n-ts.js\n// File: ${rel}\nconst data = ${JSON.stringify(data, null, 2)} as const;\n\nexport default data;\n`;
  fs.writeFileSync(filePath, content, 'utf8');
}

function listLocaleFiles(localeDir) {
  const res = [];
  for (const name of fs.readdirSync(localeDir)) {
    const p = path.join(localeDir, name);
    const stat = fs.statSync(p);
    if (stat.isFile() && p.endsWith('.ts') && !p.endsWith('index.ts')) res.push(p);
  }
  return res.sort();
}

function main() {
  const args = process.argv.slice(2);
  const apply = args.includes('--apply');
  const localesDirArg = args.find(a => a.startsWith('--localesDir='));
  const localesDir = localesDirArg ? localesDirArg.split('=')[1] : 'src/i18n/locales';
  const absLocales = path.isAbsolute(localesDir) ? localesDir : path.join(process.cwd(), localesDir);

  const enDir = path.join(absLocales, 'en');
  const deDir = path.join(absLocales, 'de');
  if (!fs.existsSync(enDir) || !fs.existsSync(deDir)) {
    console.error(`Missing locale directories: ${enDir} or ${deDir}`);
    process.exit(1);
  }

  let totalExtra = 0;
  for (const deFile of listLocaleFiles(deDir)) {
    const relName = path.basename(deFile);
    const enFile = path.join(enDir, relName);
    if (!fs.existsSync(enFile)) {
      console.warn(`(skip) ${relName}: no EN counterpart`);
      continue;
    }
    const deMod = loadTsModule(deFile);
    const enMod = loadTsModule(enFile);
    const deObj = (deMod && (deMod.default || deMod.data || deMod)) ?? {};
    const enObj = (enMod && (enMod.default || enMod.data || enMod)) ?? {};

    const deKeys = extractKeys(deObj);
    const enKeys = new Set(extractKeys(enObj));
    const extras = deKeys.filter(k => !enKeys.has(k));

    if (extras.length === 0) {
      console.log(`✓ ${relName}: no extra keys`);
      continue;
    }

    totalExtra += extras.length;
    console.log(`! ${relName}: extra keys in DE not in EN (${extras.length})`);
    for (const k of extras) console.log('  - ' + k);

    if (apply) {
      // Best-effort removal for object keys only (arrays are left untouched)
      const objectExtras = extras.filter(k => typeof get(deObj, k) !== 'undefined');
      let removed = 0;
      for (const k of objectExtras) {
        if (deletePath(deObj, k)) removed++;
      }
      writeTsModule(deFile, deObj);
      console.log(`  ✎ removed ${removed} keys from ${relName}`);
    }
  }

  if (!apply) console.log(`\nDry-run complete. Total extra keys: ${totalExtra}`);
}

try { main(); } catch (err) {
  console.error('[prune-unused-i18n-ts] Error:', err?.message || err);
  process.exit(1);
}
