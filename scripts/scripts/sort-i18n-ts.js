#!/usr/bin/env node
/* Sortiert TS-basierte Locale-Objekte rekursiv (Schlüssel alphabetisch). */
/* eslint-disable @typescript-eslint/no-require-imports */
const fs = require('fs');
const path = require('path');
const { loadTsModule } = require('./load-ts-module');

function sortObjectDeep(obj) {
  if (Array.isArray(obj)) {
    return obj.map(sortObjectDeep);
  }
  if (obj && typeof obj === 'object') {
    const sorted = {};
    for (const key of Object.keys(obj).sort((a, b) => a.localeCompare(b))) {
      sorted[key] = sortObjectDeep(obj[key]);
    }
    return sorted;
  }
  return obj;
}

function writeTsModule(filePath, data) {
  const rel = path.relative(process.cwd(), filePath);
  const content = `// Auto-generated by sort-i18n-ts.js\n// File: ${rel}\nconst data = ${JSON.stringify(data, null, 2)} as const;\n\nexport default data;\n`;
  fs.writeFileSync(filePath, content, 'utf8');
}

function processFile(filePath, apply) {
  const mod = loadTsModule(filePath);
  const data = (mod && (mod.default || mod.data || mod)) ?? {};
  const sorted = sortObjectDeep(data);
  const changed = JSON.stringify(sorted) !== JSON.stringify(data);
  if (!changed) {
    console.log(`✓ Sorted (no change): ${filePath}`);
    return { changed: false };
  }
  if (apply) {
    writeTsModule(filePath, sorted);
    console.log(`✎ Applied sort: ${filePath}`);
  } else {
    console.log(`~ Would sort: ${filePath}`);
  }
  return { changed: true };
}

function* walkFiles(dir, exts = ['.ts', '.tsx']) {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  for (const e of entries) {
    const p = path.join(dir, e.name);
    if (e.isDirectory()) {
      yield* walkFiles(p, exts);
    } else if (exts.includes(path.extname(p)) && !p.endsWith('index.ts')) {
      yield p;
    }
  }
}

function main() {
  const args = process.argv.slice(2);
  const apply = args.includes('--apply');
  const localesDirArg = args.find(a => a.startsWith('--localesDir='));
  const localesDir = localesDirArg ? localesDirArg.split('=')[1] : 'src/i18n/locales';
  const absLocales = path.isAbsolute(localesDir) ? localesDir : path.join(process.cwd(), localesDir);

  if (!fs.existsSync(absLocales)) {
    console.error(`Locales directory not found: ${absLocales}`);
    process.exit(1);
  }

  let changedCount = 0;
  for (const locale of ['en', 'de']) {
    const dir = path.join(absLocales, locale);
    if (!fs.existsSync(dir)) {
      console.warn(`(skip) Missing locale directory: ${dir}`);
      continue;
    }
    for (const file of walkFiles(dir)) {
      const { changed } = processFile(file, apply);
      if (changed) changedCount++;
    }
  }
  if (!apply) {
    console.log(`\nDry-run complete. Files that would change: ${changedCount}`);
  } else {
    console.log(`\nApplied sort changes: ${changedCount}`);
  }
}

try { main(); } catch (err) {
  console.error('[sort-i18n-ts] Error:', err?.message || err);
  process.exit(1);
}
